(()=>{const t="https://www.soundcloud.com/";class s{constructor(s){this.proxy=s,this.getClientId=async s=>{if(!this.clientId||s){let s=t;this.proxy&&(s=this.proxy+t);const a=await application.networkRequest(s),i=(await a.text()).match(/(?!<script crossorigin src=")https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*\.js)(?=">)/g);let e;do{let t=await application.networkRequest(i?.pop()||"");e=await t.text()}while(!e.includes(',client_id:"')&&(i?.length||0)>0);this.clientId=e.match(/,client_id:"(\w+)"/)?.[1],this.clientId||Promise.reject("Unable to fetch a SoundCloud API key.")}return this.clientId},this.getV2=async(t,s)=>{s||(s={}),s.client_id=await this.getClientId();let a=t="https://api-v2.soundcloud.com/"+t;this.proxy&&(a=this.proxy+t);const i=new URL(a);try{i.search=new URLSearchParams(s).toString();const t=await application.networkRequest(i.toString());return await t.json()}catch{s.client_id=await this.getClientId(!0),i.search=new URLSearchParams(s).toString();const t=await application.networkRequest(i.toString());return await t.json()}}}}class a{constructor(t){this.api=new s(t)}searchTracksV2=async t=>await this.api.getV2("search/tracks",t);searchPlaylistsV2=async t=>await this.api.getV2("search/playlists",t);resolveV2=async t=>{String(t).match(/\d{8,}/)||String(t).includes("soundcloud")||(t=`https://soundcloud.com/${t}`);let s=t;if(String(t).includes("soundcloud")){s=(await this.api.getV2("resolve",{url:t})).id}return s};getTrackV2=async t=>{const s=await this.resolveV2(t);return await this.api.getV2(`tracks/${s}`)};getTracksArrayV2=async t=>{if(0===t.length)return[];const s=[];let a=0;for(;a<t.length;)s.push(t.slice(a,a+=50));const i=await Promise.all(s.map((t=>this.api.getV2("tracks",{ids:t.join(",")}))));return[].concat(...i)};fetchPlaylistTracks=async t=>{const s=t.tracks.splice(t.tracks.findIndex((t=>!t.title))).map((t=>t.id));return 0===s.length||(t.tracks=t.tracks.concat(await this.getTracksArrayV2(s))),t};getPlaylistV2=async t=>{const s=await this.resolveV2(t),a=await this.api.getV2(`playlists/${s}`);return this.fetchPlaylistTracks(a)};getTopPlaylistsV2=async()=>await this.api.getV2("mixed-selections")}const i=t=>{let s=t.artwork_url?t.artwork_url:t.user?.avatar_url;return s?[{url:s,height:100,width:100},{url:s.replace("-large","-t500x500"),height:500,width:500}]:[]},e=t=>({name:t.title,apiId:t.id.toString(),images:i(t)});class r{constructor(t){this.soundcloud=t,this.soundcloudTrackToTrack=t=>({name:t.title,apiId:t.id.toString(),duration:t.duration/1e3,artistName:t.publisher_metadata?.artist||"",source:t.media.transcodings.find(this.trackFilter.bind(this))?.url,images:i(t)})}trackFilter(t){return this.progressiveFilter(t)||this.hlsFilter(t)}progressiveFilter(t){return"audio/mpeg"===t.format.mime_type&&"progressive"===t.format.protocol}hlsFilter(t){return"audio/mpeg"===t.format.mime_type&&"hls"===t.format.protocol}async searchTracks(t){const s=t.pageInfo?.offset||0,a=await(this.soundcloud?.searchTracksV2({q:t.query,limit:50,offset:s})),i=a?.collection.map(this.soundcloudTrackToTrack.bind(this)),e={offset:s,resultsPerPage:50,totalResults:a?.total_results||0};return{items:i?.filter((t=>!!t.source))||[],pageInfo:e}}async searchPlaylists(t){const s=t.pageInfo?.offset||0,a=await(this.soundcloud?.searchPlaylistsV2({q:t.query,limit:50,offset:s})),i=a?.collection.map(e);return{items:i||[],pageInfo:{offset:s,resultsPerPage:50,totalResults:a?.total_results||0}}}async getPlaylistTracks(t){const s=await this.soundcloud.getPlaylistV2(t.apiId||""),a=s?.tracks.map(this.soundcloudTrackToTrack.bind(this));return{items:a?.filter((t=>!!t.source))||[],playlist:s&&{name:s.title,apiId:s.id.toString(),images:i(s)}}}async searchAll(t){const s=this.searchTracks(t),a=this.searchPlaylists(t),[i,e]=await Promise.all([s,a]);return{tracks:i,playlists:e}}async getTopItems(){console.log("getTopItems");const t=await this.soundcloud.getTopPlaylistsV2();console.log("playlists",t);const s=t.collection.flatMap((t=>t.items.collection.map(e)));return console.log("playlistInfos",s),{playlists:{items:s}}}async getTrackByUrl(t){const s=await application.isNetworkRequestCorsDisabled(),a=await application.getCorsProxy()||"https://cloudcors.audio-pwa.workers.dev/",i=s?"":a;let e=await this.soundcloud.api.getClientId();const r=await this.soundcloud.getTrackV2(t.apiId||"");let o=r?.media.transcodings.find(this.progressiveFilter.bind(this))?.url||"";o||(o=r?.media.transcodings.find(this.hlsFilter.bind(this))?.url||"");let c="",l=o?.includes("secret_token")?`&client_id=${e}`:`?client_id=${e}`;try{const t=await application.networkRequest(i+o+l);c=(await t.json()).url}catch{e=await this.soundcloud.api.getClientId(!0),l=o?.includes("secret_token")?`&client_id=${e}`:`?client_id=${e}`;const t=await application.networkRequest(i+o+l);c=(await t.json()).url}return c}}(async()=>{const t=await application.isNetworkRequestCorsDisabled();let s,i=await application.getCorsProxy();i||(i="https://cloudcors.audio-pwa.workers.dev/"),s=t?new a:new a(i);const e=new r(s);application.onSearchAll=e.searchAll.bind(e),application.onSearchTracks=e.searchTracks.bind(e),application.onSearchPlaylists=e.searchPlaylists.bind(e),application.onGetPlaylistTracks=e.getPlaylistTracks.bind(e),application.onGetTrackUrl=e.getTrackByUrl.bind(e),application.onGetTopItems=e.getTopItems.bind(e)})()})();