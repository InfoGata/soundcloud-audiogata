const u="https://www.soundcloud.com/",y="https://api-v2.soundcloud.com/";class k{constructor(i){this.proxy=i,this.getClientId=async t=>{if(!this.clientId||t){let s=u;this.proxy&&(s=this.proxy+u);const r=(await(await application.networkRequest(s)).text()).match(/(?!<script crossorigin src=")https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*\.js)(?=">)/g);let o;do o=await(await application.networkRequest(r?.pop()||"")).text();while(!o.includes(',client_id:"')&&(r?.length||0)>0);this.clientId=o.match(/,client_id:"(\w+)"/)?.[1],this.clientId||Promise.reject("Unable to fetch a SoundCloud API key.")}return this.clientId},this.getV2=async(t,s)=>{s||(s={}),s.client_id=await this.getClientId();let e=t=y+t;this.proxy&&(e=this.proxy+t);const a=new URL(e);try{return a.search=new URLSearchParams(s).toString(),await(await application.networkRequest(a.toString())).json()}catch{return s.client_id=await this.getClientId(!0),a.search=new URLSearchParams(s).toString(),await(await application.networkRequest(a.toString())).json()}}}}class d{constructor(i){this.searchTracksV2=async t=>await this.api.getV2("search/tracks",t),this.searchPlaylistsV2=async t=>await this.api.getV2("search/playlists",t),this.resolveV2=async t=>{!String(t).match(/\d{8,}/)&&!String(t).includes("soundcloud")&&(t=`https://soundcloud.com/${t}`);let s=t;return String(t).includes("soundcloud")&&(s=(await this.api.getV2("resolve",{url:t})).id),s},this.getTrackV2=async t=>{const s=await this.resolveV2(t);return await this.api.getV2(`tracks/${s}`)},this.getTracksArrayV2=async t=>{if(t.length===0)return[];const s=[];let e=0;for(;e<t.length;)s.push(t.slice(e,e+=50));const a=[],r=await Promise.all(s.map(o=>this.api.getV2("tracks",{ids:o.join(",")})));return a.concat(...r)},this.fetchPlaylistTracks=async t=>{const s=t.tracks.splice(t.tracks.findIndex(e=>!e.title)).map(e=>e.id);return s.length===0||(t.tracks=t.tracks.concat(await this.getTracksArrayV2(s))),t},this.getPlaylistV2=async t=>{const s=await this.resolveV2(t),e=await this.api.getV2(`playlists/${s}`);return this.fetchPlaylistTracks(e)},this.getTopPlaylistsV2=async()=>await this.api.getV2("mixed-selections"),this.api=new k(i)}}const p=n=>{let i=n.artwork_url?n.artwork_url:n.user?.avatar_url;return i?[{url:i,height:100,width:100},{url:i.replace("-large","-t500x500"),height:500,width:500}]:[]},h=n=>({name:n.title,apiId:n.id.toString(),images:p(n)});class m{constructor(i){this.soundcloud=i,this.soundcloudTrackToTrack=t=>({name:t.title,apiId:t.id.toString(),duration:t.duration/1e3,artistName:t.publisher_metadata?.artist||"",source:t.media.transcodings.find(this.trackFilter.bind(this))?.url,images:p(t)})}trackFilter(i){return this.progressiveFilter(i)||this.hlsFilter(i)}progressiveFilter(i){return i.format.mime_type==="audio/mpeg"&&i.format.protocol==="progressive"}hlsFilter(i){return i.format.mime_type==="audio/mpeg"&&i.format.protocol==="hls"}async searchTracks(i){const s=i.pageInfo?.offset||0,e=await this.soundcloud?.searchTracksV2({q:i.query,limit:50,offset:s}),a=e?.collection.map(this.soundcloudTrackToTrack.bind(this)),r={offset:s,resultsPerPage:50,totalResults:e?.total_results||0};return{items:a?.filter(o=>!!o.source)||[],pageInfo:r}}async searchPlaylists(i){const s=i.pageInfo?.offset||0,e=await this.soundcloud?.searchPlaylistsV2({q:i.query,limit:50,offset:s}),a=e?.collection.map(h),r={offset:s,resultsPerPage:50,totalResults:e?.total_results||0};return{items:a||[],pageInfo:r}}async getPlaylistTracks(i){const t=await this.soundcloud.getPlaylistV2(i.apiId||"");return{items:t?.tracks.map(this.soundcloudTrackToTrack.bind(this))?.filter(e=>!!e.source)||[],playlist:t&&{name:t.title,apiId:t.id.toString(),images:p(t)}}}async searchAll(i){const t=this.searchTracks(i),s=this.searchPlaylists(i),[e,a]=await Promise.all([t,s]);return{tracks:e,playlists:a}}async getTopItems(){console.log("getTopItems");const i=await this.soundcloud.getTopPlaylistsV2();console.log("playlists",i);const t=i.collection.flatMap(s=>s.items.collection.map(h));return console.log("playlistInfos",t),{playlists:{items:t}}}async getTrackByUrl(i){const t=await application.isNetworkRequestCorsDisabled(),s=await application.getCorsProxy()||"https://cloudcors.audio-pwa.workers.dev/",e=t?"":s;let a=await this.soundcloud.api.getClientId();const r=await this.soundcloud.getTrackV2(i.apiId||"");let o=r?.media.transcodings.find(this.progressiveFilter.bind(this))?.url||"";o||(o=r?.media.transcodings.find(this.hlsFilter.bind(this))?.url||"");let c="",l=o?.includes("secret_token")?`&client_id=${a}`:`?client_id=${a}`;try{c=(await(await application.networkRequest(e+o+l)).json()).url}catch{a=await this.soundcloud.api.getClientId(!0),l=o?.includes("secret_token")?`&client_id=${a}`:`?client_id=${a}`,c=(await(await application.networkRequest(e+o+l)).json()).url}return c}}const f=async()=>{const n=await application.isNetworkRequestCorsDisabled();let i=await application.getCorsProxy(),t;i||(i="https://cloudcors.audio-pwa.workers.dev/"),n?t=new d:t=new d(i);const s=new m(t);application.onSearchAll=s.searchAll.bind(s),application.onSearchTracks=s.searchTracks.bind(s),application.onSearchPlaylists=s.searchPlaylists.bind(s),application.onGetPlaylistTracks=s.getPlaylistTracks.bind(s),application.onGetTrackUrl=s.getTrackByUrl.bind(s),application.onGetTopItems=s.getTopItems.bind(s)};f();
